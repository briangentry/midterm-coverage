author <- strsplit(author, "<")[[1]][1]
author <- trimws(author)
}
blogtext$author <- author
temp_date <- xpathSApply(blogdata, "//span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
# get position info
pos <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
pos <- strsplit(pos, ",")
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
}
all_text <- rbind(all_text, blogtext)
if ((Sys.Date() - as.Date(blogtext$date)) > 31) {
break
}
}
}
all_text <- data.frame(title = character(),
textlength = character(),
date = character(),
author = character(),
position = character(),
stringsAsFactors = F)
slinks <- links
for (j in 1:length(slinks)[1]) {
links <- slinks[[j]]
for (i in 1:length(links)) {
blogtext <- data.frame(title = "",
textlength = "",
date = "",
author = "",
position = "", stringsAsFactors = F)
print(i)
blogdata <- htmlParse(getURI(links[i]))
feature <- length(xpathSApply(blogdata, "//div[contains(@class, 'full-width')]"))
if (feature) {
author <- xpathSApply(blogdata, "//div[@class='storymeta']/p/a/text()", saveXML)[[1]]
blogtext$author <- author
# position
pos <- xpathSApply(blogdata, "//div[@class='storymeta']/p", saveXML)[[1]]
pos <- strsplit(pos, ",")[[1]][2]
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
temp_date <- xpathSApply(blogdata, "//div[@class='storymeta']/p/span/span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
} else {
author <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
author <- strsplit(author, "By")[[1]][2]
author <- trimws(strsplit(author, ",")[[1]][1])
if (grepl("<a", author)) {
author <- strsplit(author, ">")[[1]][2]
author <- strsplit(author, "<")[[1]][1]
author <- trimws(author)
}
blogtext$author <- author
temp_date <- xpathSApply(blogdata, "//span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
# get position info
pos <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
pos <- strsplit(pos, ",")
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
}
all_text <- rbind(all_text, blogtext)
print(blogtext$title)
if ((Sys.Date() - as.Date(blogtext$date)) > 31) {
break
}
}
}
slinks
links <- vector("list", length = length(news_urls))
for (i in seq(length(news_urls)[1])) {
url <- news_urls[i]
print(url)
postdata <- htmlParse(getURI(url))
links[[i]] <- unname(xpathSApply(postdata,"//h2/a/@href"))
}
l <- length(links)*length(links[[1]])
all_text <- data.frame(title = character(),
textlength = character(),
date = character(),
author = character(),
position = character(),
stringsAsFactors = F)
slinks <- links
links <- slinks[[j]]
links
for (j in c(1)) {
links <- slinks[[j]]
for (i in 1:length(links)) {
blogtext <- data.frame(title = "",
textlength = "",
date = "",
author = "",
position = "", stringsAsFactors = F)
print(i)
blogdata <- htmlParse(getURI(links[i]))
feature <- length(xpathSApply(blogdata, "//div[contains(@class, 'full-width')]"))
if (feature) {
author <- xpathSApply(blogdata, "//div[@class='storymeta']/p/a/text()", saveXML)[[1]]
blogtext$author <- author
# position
pos <- xpathSApply(blogdata, "//div[@class='storymeta']/p", saveXML)[[1]]
pos <- strsplit(pos, ",")[[1]][2]
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
temp_date <- xpathSApply(blogdata, "//div[@class='storymeta']/p/span/span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
} else {
author <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
author <- strsplit(author, "By")[[1]][2]
author <- trimws(strsplit(author, ",")[[1]][1])
if (grepl("<a", author)) {
author <- strsplit(author, ">")[[1]][2]
author <- strsplit(author, "<")[[1]][1]
author <- trimws(author)
}
blogtext$author <- author
temp_date <- xpathSApply(blogdata, "//span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
# get position info
pos <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
pos <- strsplit(pos, ",")
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
}
all_text <- rbind(all_text, blogtext)
print(blogtext$title)
if ((Sys.Date() - as.Date(blogtext$date)) > 31) {
break
}
}
}
all_text
slinks
for (j in 1:length(slinks)) {
links <- slinks[[j]]
for (i in 1:length(links)) {
blogtext <- data.frame(title = "",
textlength = "",
date = "",
author = "",
position = "", stringsAsFactors = F)
print(i)
blogdata <- htmlParse(getURI(links[i]))
feature <- length(xpathSApply(blogdata, "//div[contains(@class, 'full-width')]"))
if (feature) {
author <- xpathSApply(blogdata, "//div[@class='storymeta']/p/a/text()", saveXML)[[1]]
blogtext$author <- author
# position
pos <- xpathSApply(blogdata, "//div[@class='storymeta']/p", saveXML)[[1]]
pos <- strsplit(pos, ",")[[1]][2]
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
temp_date <- xpathSApply(blogdata, "//div[@class='storymeta']/p/span/span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
} else {
author <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
author <- strsplit(author, "By")[[1]][2]
author <- trimws(strsplit(author, ",")[[1]][1])
if (grepl("<a", author)) {
author <- strsplit(author, ">")[[1]][2]
author <- strsplit(author, "<")[[1]][1]
author <- trimws(author)
}
blogtext$author <- author
temp_date <- xpathSApply(blogdata, "//span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
# get position info
pos <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
pos <- strsplit(pos, ",")
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
}
all_text <- rbind(all_text, blogtext)
print(blogtext$title)
if ((Sys.Date() - as.Date(blogtext$date)) > 31) {
break
}
}
}
all_text
source('~/pitt-news-graphics/scripts/news-pay.R')
all_text
i
htmlParse(getURI(links[i]))
blogdata <- htmlParse(getURI(links[i]))
feature <- length(xpathSApply(blogdata, "//div[contains(@class, 'full-width')]"))
feature
author <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
xpathSApply(blogdata, "//*[@class='storyheadline']/text()", saveXML)[[1]]
source('~/pitt-news-graphics/scripts/news-pay.R')
author <- xpathSApply(blogdata, "//*[@class='storybyline']", saveXML)[[1]]
xpathSApply(blogdata, "//*[@class='storybyline']", saveXML)
all_text <- data.frame(title = character(),
textlength = character(),
date = character(),
author = character(),
position = character(),
stringsAsFactors = F)
slinks <- links
for (j in 1:length(slinks)) {
links <- slinks[[j]]
for (i in 1:length(links)) {
blogtext <- data.frame(title = "",
textlength = "",
date = "",
author = "",
position = "", stringsAsFactors = F)
print(i)
blogdata <- htmlParse(getURI(links[i]))
feature <- length(xpathSApply(blogdata, "//div[contains(@class, 'full-width')]"))
if (feature) {
author <- xpathSApply(blogdata, "//div[@class='storymeta']/p/a/text()", saveXML)[[1]]
blogtext$author <- author
# position
pos <- xpathSApply(blogdata, "//div[@class='storymeta']/p", saveXML)[[1]]
pos <- strsplit(pos, ",")[[1]][2]
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
temp_date <- xpathSApply(blogdata, "//div[@class='storymeta']/p/span/span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//*[@class='storyheadline']/text()", saveXML)[[1]]
} else {
author <- xpathSApply(blogdata, "//*[@class='storybyline']", saveXML)
if (length(author) >= 1) {
author <- author[[1]]
author <- strsplit(author, "By")[[1]][2]
author <- trimws(strsplit(author, ",")[[1]][1])
if (grepl("<a", author)) {
author <- strsplit(author, ">")[[1]][2]
author <- strsplit(author, "<")[[1]][1]
author <- trimws(author)
}
} else {
author <- NA
}
blogtext$author <- author
temp_date <- xpathSApply(blogdata, "//span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
# get position info
pos <- xpathSApply(blogdata, "//span[@class='storybyline']", saveXML)[[1]]
pos <- strsplit(pos, ",")
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
}
all_text <- rbind(all_text, blogtext)
print(blogtext$title)
if ((Sys.Date() - as.Date(blogtext$date)) > 31) {
break
}
}
}
links <- vector("list", length = length(news_urls))
for (i in seq(length(news_urls)[1])) {
url <- news_urls[i]
print(url)
postdata <- htmlParse(getURI(url))
links[[i]] <- unname(xpathSApply(postdata,"//h2/a/@href"))
}
l <- length(links)*length(links[[1]])
all_text <- data.frame(title = character(),
textlength = character(),
date = character(),
author = character(),
position = character(),
stringsAsFactors = F)
slinks <- links
for (j in 1:length(slinks)) {
links <- slinks[[j]]
for (i in 1:length(links)) {
blogtext <- data.frame(title = "",
textlength = "",
date = "",
author = "",
position = "", stringsAsFactors = F)
print(i)
blogdata <- htmlParse(getURI(links[i]))
feature <- length(xpathSApply(blogdata, "//div[contains(@class, 'full-width')]"))
if (feature) {
author <- xpathSApply(blogdata, "//div[@class='storymeta']/p/a/text()", saveXML)[[1]]
blogtext$author <- author
# position
pos <- xpathSApply(blogdata, "//div[@class='storymeta']/p", saveXML)[[1]]
pos <- strsplit(pos, ",")[[1]][2]
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
temp_date <- xpathSApply(blogdata, "//div[@class='storymeta']/p/span/span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//*[@class='storyheadline']/text()", saveXML)[[1]]
} else {
author <- xpathSApply(blogdata, "//*[@class='storybyline']", saveXML)
if (length(author) >= 1) {
author <- author[[1]]
pos <- strsplit(author, ",")
pos <- trimws(gsub("</span>", "", pos[[1]][2]))
blogtext$position <- pos
author <- strsplit(author, "By")[[1]][2]
author <- trimws(strsplit(author, ",")[[1]][1])
if (grepl("<a", author)) {
author <- strsplit(author, ">")[[1]][2]
author <- strsplit(author, "<")[[1]][1]
author <- trimws(author)
}
} else {
author <- NA
pos <- NA
}
blogtext$author <- author
temp_date <- xpathSApply(blogdata, "//span[@class='time-wrapper']/text()", saveXML)[[1]]
blogtext$date <- ifelse(grepl("am", temp_date) | grepl("pm", temp_date), as.character(Sys.Date()),
as.character(as.Date(trimws(temp_date), format = "%B %d, %Y")))
text <- xpathSApply(blogdata, "//span[@class='storycontent']/p", saveXML)
text2 <- xpathSApply(blogdata, "//span[@class='storycontent']/div[@class='flourish-embed']/p", saveXML)
text <- c(text, text2)
text <- gsub('<.*?>', '', text, perl = T)
text <- gsub("\\n", "", text)
text <- gsub("\\s{2,}", " ", text)
text <- trimws(text)
blogtext$textlength <- sum(nchar(text))
blogtext$title <- xpathSApply(blogdata, "//h1[@class='storyheadline']/text()", saveXML)[[1]]
}
all_text <- rbind(all_text, blogtext)
print(blogtext$title)
if ((Sys.Date() - as.Date(blogtext$date)) > 31) {
break
}
}
}
blogtext
all_text
blogtext
library(rvest)
url <- "http://www.legis.state.pa.us/cfdocs/legis/home/findyourlegislator/county_list.cfm?CNTYLIST=ALLEGHENY"
s <- html_session(url)
s %>% html_nodes(xpath = "/html/body/div/section/div/div[2]/table")
s %>% html_nodes(xpath = "/html/body/div/section/div/div[2]/table") %>% html_table() -> table
table
table[[1]]$`PA House District` -> house
house
unique(house)
unique(house)
%>% order()
order(unique(house))
house[order(unique(house))]
house[order(-unique(house))]
is(house)
house[order(-unique(house))]
house[order(unique(house))]
unique(house)[order(unique(house))]
unique(house)[order(unique(house))] -> allegheny
allegheny
toJSON(allegheny)
library(jsonlite)
toJSON(allegheny)
setwd("Downloads/")
library(jsonlite)
x <- read_json("Allegheny_County_Municipal_Boundaries.geojson")
x
plot(x)
library(sp)
install.packages('sp')
install.packages('rgdal')
library(Rgdal)
install.packages('geojsonio')
library(geojsonio)
x <- geojson_read("Allegheny_County_Municipal_Boundaries.geojson", what = "sp")
x
plot(x)
library(sp)
plot(x)
library(rgeos)
centroids <- gCentroid(x, byid = T)
centroids
names(x)
x$NAME
x$NAME %>% length()
plot(x)
points(centroids)
df <- data.frame(city = as.character(x$NAME), x = centroids$x, y = centroids$y)
df
write.csv(df, "~/pitt-news-graphics/midterms/precoverage/ac-cities.csv", row.names = F)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table
source('~/.active-rstudio-document')
table
source('~/.active-rstudio-document')
table
table
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(x)
dev.off()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x
plot(x)
x$LINEARID
x$MTFCC
x$RTTYP
x@data
x@lines
plot(x@lines)
??st_as_sf
install.packages("sf")
